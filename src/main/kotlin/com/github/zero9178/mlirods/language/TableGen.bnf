{
  parserClass="com.github.zero9178.mlirods.language.generated.TableGenParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TableGen"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.zero9178.mlirods.language.generated.psi"
  psiImplPackage="com.github.zero9178.mlirods.language.generated.psi.impl"

  elementTypeHolderClass="com.github.zero9178.mlirods.language.generated.TableGenTypes"
  elementTypeClass="com.github.zero9178.mlirods.language.TableGenElementType"
  tokenTypeClass="com.github.zero9178.mlirods.language.TableGenTokenType"
  tokens = [
    PLUS='+'
    MINUS='-'
    LBRACKET='['
    RBRACKET=']'
    LBRACE='{'
    RBRACE='}'
    LANGLE='<'
    RANGLE='>'
    LPAREN='('
    RPAREN=')'
    COMMA=','
    COLON=':'
    SEMICOLON=';'
    DOT='.'
    ELLIPSE='...'
    EQUALS='='
    QUESTION_MARK='?'
    HASHTAG='#'
    ASSERT='assert'
    BIT='bit'
    BITS='bits'
    CLASS='class'
    CODE='code'
    DAG='dag'
    DEF='def'
    DUMP='dump'
    ELSE='else'
    FALSE='false'
    FOREACH='foreach'
    DEFM='defm'
    DEFSET='defset'
    DEFVAR='defvar'
    FIELD='field'
    IF='if'
    IN='in'
    INCLUDE='include'
    INT='int'
    LET='let'
    LIST='list'
    MULTICLASS='multiclass'
    STRING='string'
    THEN='then'
    TRUE='true'
  ]
}

tableGenFile ::= item_*

// Most accepting parser possible which simply allows a sequence of all possible token types.
// We primarily use the parser infrastructure to auto-generate the token types which the lexer generates.
// It could be used in the future for semantic tokens as well, although the LSP should provide these instead.
private item_ ::= punctuation
                | INTEGER
                | LINE_COMMENT
                | BLOCK_COMMENT
                | CLRF
                | BLOCK_STRING_LITERAL
                | LINE_STRING_LITERAL
                | LINE_STRING_LITERAL_BAD
                | IDENTIFIER
                | OTHER
                | keyword

punctuation ::= '+' | '-' | '[' | ']' | '{' | '}' | '<' | '>' | ':' | ';' | '.' | '...' | '=' | '?' | '#' | '(' | ')'
              | ','
keyword ::= 'assert'
          | 'bit'
          | 'bits'
          | 'class'
          | 'code'
          | 'dag'
          | 'def'
          | 'dump'
          | 'else'
          | 'false'
          | 'foreach'
          | 'defm'
          | 'defset'
          | 'defvar'
          | 'field'
          | 'if'
          | 'in'
          | 'include'
          | 'int'
          | 'let'
          | 'list'
          | 'multiclass'
          | 'string'
          | 'then'
          | 'true'
