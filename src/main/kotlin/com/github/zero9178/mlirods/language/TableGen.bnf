{
  parserClass="com.github.zero9178.mlirods.language.generated.TableGenParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TableGen"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.zero9178.mlirods.language.generated.psi"
  psiImplPackage="com.github.zero9178.mlirods.language.generated.psi.impl"
  psiImplUtilClass="com.github.zero9178.mlirods.language.psi.impl.TableGenPsiImplUtil"
  parserImports=["import static com.github.zero9178.mlirods.language.generated.TableGenParserUtil.*"]

  generate=[exact-types="all" visitor="no"]
  elementTypeHolderClass="com.github.zero9178.mlirods.language.generated.TableGenTypes"
  elementTypeClass="com.github.zero9178.mlirods.language.TableGenElementType"
  tokenTypeClass="com.github.zero9178.mlirods.language.TableGenTokenType"
  tokens = [
    PLUS='+'
    MINUS='-'
    LBRACKET='['
    RBRACKET=']'
    LBRACE='{'
    RBRACE='}'
    LANGLE='<'
    RANGLE='>'
    LPAREN='('
    RPAREN=')'
    COMMA=','
    COLON=':'
    SEMICOLON=';'
    DOT='.'
    ELLIPSE='...'
    EQUALS='='
    QUESTION_MARK='?'
    HASHTAG='#'
    ASSERT='assert'
    BIT='bit'
    BITS='bits'
    CLASS='class'
    CODE='code'
    DAG='dag'
    DEF='def'
    DUMP='dump'
    ELSE='else'
    FALSE='false'
    FOREACH='foreach'
    DEFM='defm'
    DEFSET='defset'
    DEFTYPE='deftype'
    DEFVAR='defvar'
    FIELD='field'
    IF='if'
    IN='in'
    INCLUDE='include'
    INT='int'
    LET='let'
    LIST='list'
    MULTICLASS='multiclass'
    STRING='string'
    THEN='then'
    TRUE='true'
    HASHTAG_DEFINE='#define'
    HASHTAG_IFDEF='#ifdef'
    HASHTAG_IFNDEF='#ifndef'
    HASHTAG_ELSE='#else'
    HASHTAG_ENDIF='#endif'
    IDENTIFIER="regexp:[0-9]*[a-zA-Z_][a-zA-Z_0-9]*"
    VAR_IDENTIFIER="regexp:\$[a-zA-Z_][a-zA-Z_0-9]*"
    INTEGER="regexp:((\+)?[0-9]+)|(0x[0-9a-fA-F]+)|(0b[01]+)"
    BANG_OPERATOR="regexp:![a-zA-Z]+"
    BANG_COND="!cond"
    BANG_FOREACH="!foreach"
    BANG_FOLDL="!foldl"
    // Used by live preview only.
    WHITE_SPACE="regexp:\s*"
  ]

  extends(".*_type_node")=type_node
  implements(".*_body_item")=scope_item
  implements(".*_statement")=scope_item
  extends(".*_value")=value
}

tableGenFile ::= table_gen_file_item_statement*
// For error recovery purposes, assume the user meant to write a statement and pin that choice to parse the entire file.
private table_gen_file_item_statement ::= !<<eof>> statement {
    pin=1
}

// Exit early if this is a trailing comma before closing. Otherwise, we assume a value is meant to come after.
// If a value failed to parse we recover by finding either the next comma or the closing token.
private meta private_list_trailing ::= !(',' <<closing>>) ',' <<item>> {
    pin=2
    recoverWhile="<<recover>>"
}
private meta private_list_trailing_recover ::= !(<<closing>> | ',')

// Initial rule to first attempt to parse '<<closing>>' and recover to the first item if not. This effectively
// implements a "assume anything within the delimiters should be a value" error recovery strategy.
// Recovery rule runs regardless of result and must therefore halt if either a value or something in the follow set
// appears.
private meta private_list_closing ::= !<<closing>> {
    recoverWhile="<<recover>>"
}
private meta private_list_closing_recover ::= !(<<follows>> | <<item>>)

// Meta rule that parses: "item (',' item)* ','?" with proper error recovery and handling of a closing delimiter.
// The rule contains two parameters:
// [0] Should be the closing delimiter.
// [1] Should be the follow set of the rule *after* the closing token.
private meta trailing_item_list ::=
    <<private_list_closing <<closing>> <<private_list_closing_recover <<follows>> <<item>>>>>>
    <<item>> <<private_list_trailing <<closing>> <<item>> <<private_list_trailing_recover <<closing>>>>>>* ','? {
    // If we didn't encounter the closing character then we will attempt to parse as much as possible.
    pin=1
}

// Fake base class referring to either body items or statements. Guaranteed to have a [TableGenIdentifierScopeNode] as
// parent, which is said to be the scope it is contained in.
fake scope_item ::= {
    implements=[
        "com.github.zero9178.mlirods.language.psi.impl.TableGenScopeItemEx"
    ]
}

private statement ::= assert_statement
                | class_statement
                | def_statement
                | defm_statement
                | defset_statement
                | deftype_statement
                | defvar_statement
                | dump_statement
                | foreach_statement
                | if_statement
                | let_statement
                | multiclass_statement
                | others_statement {
    recoverWhile=statement_recover
}
private statement_recover ::= !(statement_follows)
private statement_follows ::= 'def' | 'include' | 'class' | 'defm' | 'defset' | 'defvar' | 'dump' | 'foreach'
                            | 'if' | 'let' | 'multiclass' | 'assert' | '}' | 'else'

others_statement ::= BLOCK_COMMENT
                   | LINE_COMMENT
                   | OTHER

include_directive ::= 'include' LINE_STRING_LITERAL {
    pin=1
    methods=[
        string="LINE_STRING_LITERAL"

        toString
    ]
    implements=["com.github.zero9178.mlirods.language.psi.impl.TableGenIncludeDirectiveEx"]
    stubClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenIncludeDirectiveStub"
    mixin="com.github.zero9178.mlirods.language.psi.impl.TableGenIncludeDirectiveMixin"
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenIncludeDirectiveStubElementType"
}
//noinspection BnfUnusedRule
preprocessor_directive ::= define_directive
                         | ifdef_ifndef_directive
                         | else_directive
                         | endif_directive
                         | include_directive

//noinspection BnfUnusedRule
skipped_code_block ::=

define_directive ::= '#define' IDENTIFIER {
    extends=preprocessor_directive
    pin=1
}

ifdef_ifndef_directive ::= ('#ifdef' | '#ifndef') IDENTIFIER {
    extends=preprocessor_directive
    pin=1
}

else_directive ::= '#else' {
    extends=preprocessor_directive
}

endif_directive ::= '#endif' {
    extends=preprocessor_directive
}

assert_statement ::= 'assert' value ',' value ';' {pin=1}

private equals_value ::= '=' value {pin=1}

// Fake base class for elements common among 'class' and 'multiclass' statements.
fake abstract_class_statement ::= template_arg_list? parent_class_list? '{'? '}'? {
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenFoldingElement"
        "com.github.zero9178.mlirods.language.psi.TableGenIdentifierScopeNode"
    ]
    methods = [
        lAngle='LANGLE'
        rAngle='RANGLE'
        lBrace='LBRACE'
        rBrace='RBRACE'

        getPlaceHolderText
        getFoldingTextRanges
    ]
}

class_statement ::= 'class' IDENTIFIER template_arg_list? record_body {
    methods = [
        lAngle='LANGLE'
        rAngle='RANGLE'
        lBrace='LBRACE'
        rBrace='RBRACE'

        toString
        getPlaceHolderText
        getFoldingTextRanges
        getPresentation
    ]
    implements=[
        abstract_class_statement
        scope_item

        "com.intellij.navigation.NavigationItem"
        "com.intellij.psi.PsiNameIdentifierOwner"
        "com.github.zero9178.mlirods.language.psi.TableGenFieldScopeNode"
    ]
    stubClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenClassStatementStub"
    mixin="com.github.zero9178.mlirods.language.psi.impl.TableGenClassStatementMixin"
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenClassStatementStubElementType"
    pin=1
}
private template_arg_list ::= '<' template_arg_decl (',' template_arg_decl)* '>' {pin(".*")=1}
template_arg_decl ::= type_node IDENTIFIER equals_value? {
    pin=1
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenDefNameIdentifierOwner"
    ]
    methods=[
        nameIdentifier='IDENTIFIER'

        toString
        setName
        getTextOffset
    ]
    stubClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenTemplateArgDeclStub"
    mixin="com.github.zero9178.mlirods.language.psi.impl.TableGenTemplateArgDeclMixin"
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenTemplateArgDeclStubElementType"
}
private record_body ::= <<parent_class_list class_ref>>? body {pin=1}
private meta parent_class_list ::= ':' <<class_ref>> (',' <<class_ref>>)* {pin(".*")=1}

fake abstract_class_ref ::= IDENTIFIER class_ref_suffix? {
    methods=[
        class_identifier='IDENTIFIER'
        lAngle='LANGLE'
        rAngle='RANGLE'

        getClassName
    ]
    implements=[
        "com.github.zero9178.mlirods.language.psi.impl.TableGenAbstractClassRefEx"
    ]
}

multi_class_ref ::= IDENTIFIER class_ref_suffix? {
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenAngledFoldingElement"
    ]
    methods = [
        lAngle='LANGLE'
        rAngle='RANGLE'
    ]
}

class_ref ::= IDENTIFIER class_ref_suffix? {
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenAngledFoldingElement"
        abstract_class_ref
    ]
    methods = [
        lAngle='LANGLE'
        rAngle='RANGLE'
        class_identifier='IDENTIFIER'

        toString
        getClassName
        getReference
    ]
    stubClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenClassRefStub"
    mixin="com.github.zero9178.mlirods.language.psi.impl.TableGenClassRefMixin"
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenClassRefStubElementType"
}
private class_ref_suffix ::= '<' arg_value_list? '>' {pin=1}
private body ::= ';' | body_list
private body_list ::= '{' body_item* '}' {pin=1}

private body_item_follows ::= '}' | 'field' | 'let' | 'defvar' | 'assert' | 'bit' | 'bits' | 'code' | 'dag' | 'int'
                            | 'list' | 'string' | IDENTIFIER | 'dump'
private body_recover ::= !body_item_follows

private body_item ::= field_body_item
                    | let_body_item
                    | defvar_statement
                    | assert_statement
                    | dump_statement
                    {recoverWhile=body_recover}
field_body_item ::= 'field'? type_node IDENTIFIER equals_value? ';' {
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenFieldIdentifierNode"

        "com.intellij.navigation.NavigationItem"
        "com.intellij.psi.PsiNameIdentifierOwner"
    ]
    methods=[
        field_identifier="IDENTIFIER"

        toString
        getPresentation
    ]
    stubClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenFieldBodyItemStub"
    mixin="com.github.zero9178.mlirods.language.psi.impl.TableGenFieldBodyItemMixin"
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenFieldBodyItemStubElementType"
    pin=2
}
let_body_item ::= 'let' IDENTIFIER ('{' range_list '}')? '=' value ';' {
    pin=1
    implements="com.github.zero9178.mlirods.language.psi.TableGenFieldIdentifierNode"
    methods=[
        field_identifier="IDENTIFIER"

        getReference
    ]
}

// Custom variant of 'value' that does not support bits access or bits init lists as the syntax is ambiguous with
// record bodies.
//noinspection BnfResolve
external object_name ::= objectName {
    extends=value
}

def_statement ::= 'def' object_name? record_body {
    pin=1
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenBracedFoldingElement"
        "com.github.zero9178.mlirods.language.psi.TableGenDefNameIdentifierOwner"
        "com.github.zero9178.mlirods.language.psi.TableGenFieldScopeNode"
        scope_item
    ]
    methods=[
        lBrace='LBRACE'
        rBrace='RBRACE'

        toString
        getName
        setName
        getTextOffset
        getPresentation
    ]
    stubClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenDefNameIdentifierStub"
    mixin="com.github.zero9178.mlirods.language.psi.impl.TableGenDefStatementMixin"
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenDefNameIdentifierStubElementType"
}
defm_statement ::= 'defm' object_name? <<parent_class_list multi_class_ref>>? ';' {pin=1}
defset_statement ::= 'defset' type_node IDENTIFIER '=' '{' statement* '}' {pin=1}
deftype_statement ::= 'deftype' IDENTIFIER '=' type_node ';' {pin=1}
defvar_statement ::= 'defvar' IDENTIFIER '=' value ';' {
    pin=1
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenDefNameIdentifierOwner"
        scope_item
    ]
    methods=[
        nameIdentifier='IDENTIFIER'

        toString
        getName
        setName
        getTextOffset
        getPresentation
    ]
    stubClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenDefNameIdentifierStub"
    mixin="com.github.zero9178.mlirods.language.psi.impl.TableGenDefvarStatementMixin"
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenDefNameIdentifierStubElementType"
}
dump_statement ::= 'dump' value ';' {
    pin=1
    implements=[
        scope_item
    ]
}

private statement_block ::= statement_block_list | statement
private statement_block_list ::= '{' statement* '}' {pin=1}

foreach_statement ::= 'foreach' foreach_iterator 'in' statement_block {
    pin=1
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenBracedFoldingElement"
        "com.github.zero9178.mlirods.language.psi.TableGenIdentifierScopeNode"
    ]
    methods = [
        lBrace='LBRACE'
        rBrace='RBRACE'
    ]
}
foreach_iterator ::= IDENTIFIER '=' ('{' range_list '}' | range_piece | value)

if_statement ::= 'if' value 'then' if_body else_body? {
    methods=[
        thenBody="if_body[0]"
        elseBody="if_body[1]"
    ]
    pin=1
}
private else_body ::= 'else' if_body {pin=1}
if_body ::= statement_block {
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenBracedFoldingElement"
        "com.github.zero9178.mlirods.language.psi.TableGenIdentifierScopeNode"
    ]
    methods = [
        lBrace='LBRACE'
        rBrace='RBRACE'
    ]
}

let_statement ::= 'let' let_list 'in' statement_block {
    pin=1
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenBracedFoldingElement"
        "com.github.zero9178.mlirods.language.psi.TableGenIdentifierScopeNode"
    ]
    methods = [
        lBrace='LBRACE'
        rBrace='RBRACE'
    ]
}
private let_list ::= let_item (',' let_item)*
let_item ::= IDENTIFIER ('<' range_list '>')? '=' value {
    implements="com.github.zero9178.mlirods.language.psi.TableGenFieldIdentifierNode"
    methods=[
        field_identifier="IDENTIFIER"
    ]
}
multiclass_statement ::= 'multiclass' IDENTIFIER template_arg_list? <<parent_class_list multi_class_ref>>? (';' | statement_block) {
    methods = [
        lAngle='LANGLE'
        rAngle='RANGLE'
        lBrace='LBRACE'
        rBrace='RBRACE'

        getPlaceHolderText
        getFoldingTextRanges
    ]
    implements=abstract_class_statement
    pin=1
}

type_node ::= bit_type_node
          | int_type_node
          | string_type_node
          | dag_type_node
          | code_type_node
          | bits_type_node
          | list_type_node
          | class_type_node {
    implements=[
        "com.github.zero9178.mlirods.language.psi.impl.TableGenTypeNodeEx"
    ]
    methods=[
        toString
    ]
    stubClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenTypeNodeStub"
    mixin="com.github.zero9178.mlirods.language.psi.impl.TableGenTypeNodeMixin"
}
bit_type_node ::= 'bit' {
    methods=[
        toType
    ]
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenBitTypeNodeStubElementType"
}
int_type_node ::= 'int' {
    methods=[
        toType
    ]
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenIntTypeNodeStubElementType"
}
string_type_node ::= 'string' {
    methods=[
        toType
    ]
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenStringTypeNodeStubElementType"
}
dag_type_node ::= 'dag' {
    methods=[
        toType
    ]
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenDagTypeNodeStubElementType"
}
code_type_node ::= 'code' {
    methods=[
        toType
    ]
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenCodeTypeNodeStubElementType"
}
bits_type_node ::= 'bits' '<' INTEGER '>' {
    pin=1
    methods=[
        toType
    ]
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenBitsTypeNodeStubElementType"
}
list_type_node ::= 'list' '<' type_node '>' {
    pin=1
    methods=[
        toType
    ]
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenListTypeNodeStubElementType"
}
class_type_node ::= IDENTIFIER {
    methods=[
        class_identifier='IDENTIFIER'

        getClassName
        getReference
        toType
    ]
    implements=abstract_class_ref
    mixin="com.github.zero9178.mlirods.language.psi.impl.TableGenClassTypeNodeMixin"
    elementTypeClass="com.github.zero9178.mlirods.language.stubs.impl.TableGenClassTypeNodeStubElementType"
}

value ::= concat_value
        | field_access_value
        | bit_access_value
        | slice_access_value
        | simple_value {
    implements=[
        "com.github.zero9178.mlirods.language.psi.impl.TableGenValueEx"
    ]
}
private value_follows ::= '#' | '[' | '{' | 'then' | 'in' | '.' | ',' | ':' | '=' | ')' | ']' | '}' | ';' | '>'

// Extracted suffixes for the use by the 'objectName' external parsing rule.
// This makes the parse method package private rather than private if only generated as part of the expression parser.
private concat_value_suffix ::= '#' value? {
    pin=1
}
concat_value ::= value concat_value_suffix {
    methods = [
        left_operand="/value[0]"
        right_operand="/value[1]"

        getType
    ]
}

private field_access_value_suffix ::= '.' IDENTIFIER {
    pin=1
}
field_access_value ::= value field_access_value_suffix {
    implements="com.github.zero9178.mlirods.language.psi.TableGenFieldIdentifierNode"
    methods = [
        field_identifier="IDENTIFIER"

        getReference
        getType
    ]
    pin=2
}

bit_access_value ::= value '{' range_list '}' {pin=2}
private range_list ::= range_piece (',' range_piece)*
range_piece ::= bit_range
              | single_bit
single_bit ::= value {extends=range_piece}
bit_range ::= value ('...' | '-') value {
    extends=range_piece
}

private slice_access_value_suffix ::= '[' <<trailing_item_list ']' value_follows slice_element>> ']' {
    pin=1
}
slice_access_value ::= value slice_access_value_suffix {
    methods=[
        getType
    ]
}
slice_element ::= slice_element_range
                | single_slice_element
single_slice_element ::= value {extends=slice_element}
slice_element_range ::= value ('...' | '-') value {extends=slice_element}

private simple_value ::= integer_value
               | string_value
               | bool_value
               | undef_value
               | bits_init_value
               | list_init_value
               | dag_init_value
               | class_instantiation_value
               | identifier_value
               | cond_operator_value
               | foreach_operator_value
               | foldl_operator_value
               | bang_operator_value

private meta value_list ::= <<trailing_item_list <<closing>> <<follows>> value>>

integer_value ::= '-'? INTEGER {
    methods=[
        getType
    ]
}
string_value ::= block_string_value
               | LINE_STRING_LITERAL+
               | LINE_STRING_LITERAL_BAD {
    methods=[
        getType
    ]
}
block_string_value ::= BLOCK_STRING_LITERAL {
    extends=string_value
    implements="com.github.zero9178.mlirods.language.psi.TableGenFoldingElement"
    methods = [
        getPlaceHolderText
        getType
    ]
}
bool_value ::= 'true' | 'false' {
    methods=[
        getType
    ]
}
undef_value ::= '?'

bits_init_value ::= '{' <<value_list '}' value_follows>>? '}' {
    pin=1
}

list_init_value ::= '[' <<value_list ']' (value_follows | '<')>>? ']' ('<' type_node '>')? {
    pin=1
    methods=[
        getType
    ]
}
dag_init_value ::= '(' dag_arg [dag_arg (',' dag_arg)*] ')' {
    pin(".*")=1
    methods=[
        operator="dag_arg[0]"

        getType
    ]
}
dag_arg ::= value (':' VAR_IDENTIFIER)? | VAR_IDENTIFIER {
    pin(".*")=1
}
identifier_value ::= IDENTIFIER {
    methods=[
        getReference

        getType
    ]
}

class_instantiation_value ::= IDENTIFIER '<' arg_value_list? '>' {
    pin=2
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenAngledFoldingElement"
        abstract_class_ref
    ]
    methods = [
        lAngle='LANGLE'
        rAngle='RANGLE'
        class_identifier='IDENTIFIER'

        getClassName
        getReference
        getType
    ]
}
// Note: This is a simplification from the official syntax that is easier to parse.
private arg_value_list ::= arg_value_item (',' arg_value_item)* {
    pin(".*") = 1
}
arg_value_item ::= value equals_value?

foreach_operator_value ::= '!foreach' '(' IDENTIFIER ',' value ',' value ')' {
    pin=1
    methods=[
        iterable="/value[0]"
        body="/value[1]"
        name_identifier="IDENTIFIER"

        getType
        getName
        setName
        getTextOffset
    ]
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenDefNameIdentifierOwner"
    ]
}

foldl_accumulator ::= IDENTIFIER {
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenDefNameIdentifierOwner"
    ]
    methods=[
        name_identifier="IDENTIFIER"

        getName
        setName
        getTextOffset
    ]
}
foldl_operator_value ::= '!foldl' '(' value ',' value ',' foldl_accumulator ',' IDENTIFIER ',' value ')' {
    pin=1
    methods=[
        start="/value[0]"
        iterable="/value[1]"
        body="/value[2]"
        name_identifier="IDENTIFIER"

        getType
        getName
        setName
        getTextOffset
    ]
    implements=[
        "com.github.zero9178.mlirods.language.psi.TableGenDefNameIdentifierOwner"
    ]
}

bang_operator_value ::= BANG_OPERATOR ('<' type_node '>')? '(' <<value_list ')' value_follows>>? ')' {pin=1}
cond_operator_value ::= '!cond' '(' <<trailing_item_list ')' value_follows cond_clause>> ')' {pin=1}
cond_clause ::= value ':' value {
    methods=[
        condition="value[0]"
        thenValue="value[1]"
    ]
}
